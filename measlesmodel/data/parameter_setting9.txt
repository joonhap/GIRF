  const double R0 = 25.0; // basic reproduction number (matches beta_s = 33.0)
  sobj.theta[0] = log(R0);
  const double amp = .163; // seasonal amplitude (matches holiday effect=.7)  (for formula, see He et al (2009))  0 < amp < .68
  sobj.theta[1] = log(amp/(.68-amp));
  const double alpha = 0.97; // mixing exponent
  sobj.theta[2] = alpha;
  const double mu = 0.0166/52; // mortality rate
  sobj.theta[3] = mu;
  const double gen = 2.0; // length of one generation cycle of measles transmission (defined as 1/nu_EI + 1/nu_IR)
  sobj.theta[4] = log(gen);
  const double infec_period_prop = .5; // infectious period proportion compared to the generation cycle (=1/nu_EI + 1/nu_IR) (logit-transformed)
  sobj.theta[5] = log(infec_period_prop/(1.0-infec_period_prop));
  const double sigma2 = 0.08; // variability constant (for gamma process, sigma^2. see Box 1 in He et al 2009) (log-transformed)
  sobj.theta[6] = log(sigma2);
  const double rep = 0.50; // reporting probability (logit-transformed)
  sobj.theta[7] = log(rep/(1.0-rep));
  const double repOD = 0.25; // reporting overdispersion (log-transformed)
  sobj.theta[8] = log(repOD);
  const double G = std::stof(args[1]); // gravity model coefficient (log-transformed)
  sobj.theta[9] = log(G);
  const double source_pow = 1.0; // exponent to source population size in gravity model
  sobj.theta[10] = source_pow;
  const double dest_pow = 1.0; // exponent to destination population size in gravity model
  sobj.theta[11] = dest_pow;
  const double dist_pow = 1.0; // exponent to distance in gravity model
  sobj.theta[12] = dist_pow;
  const double cohort_entry = 0.4; // cohort entry fraction
  sobj.theta[13] = log(cohort_entry/(1.0-cohort_entry));
  const int schoolstart = 251; // school start day 
  sobj.theta[14] = double(schoolstart);
  const int entryage = 4; // school entry age 
  sobj.theta[15] = double(entryage);
  const int startyear = 1949; // start year (the year at which t=0)
  sobj.theta[16] = double(startyear);
  double Sprop = 0.04; // initial proportion of S population
  sobj.theta[17] = log(Sprop/(1.0-Sprop));

  sobj.pos_ivp.resize(1); // there is one initial value parameter.
  sobj.pos_ivp[0] = 17; 

  //////////////////////////////////////

  // set initial state
  vector<int> state0(5*ncity, 0);

  char write_or_read = 'w'; // data file: read('r'), write('w'), or read real case data(20measles.csv) ('c')

  for (int k = 0; k < ncity; k++) {
    state0[5*k+4] = pop_data[startyear-pop_data_first_year][cityindex[k]]; // total population
    state0[5*k] = int(Sprop * state0[5*k+4]); // initial susceptible population
  }
  if (write_or_read == 'w' || write_or_read == 'r') {
    for (int k=0; k<ncity; k++) {
      state0[5*k+1] = int(0.00027*state0[5*k+4]);
      state0[5*k+2] = int(0.00032*state0[5*k+4]);
    }
  }


For K=2, G=2500,  Hastings(9) and London(20)
For K=5, G=2500,  Halesworth(1), Oswestry(5), Hastings(9), Sheffield(15), London(20)
For K=20, G=500, all cities

